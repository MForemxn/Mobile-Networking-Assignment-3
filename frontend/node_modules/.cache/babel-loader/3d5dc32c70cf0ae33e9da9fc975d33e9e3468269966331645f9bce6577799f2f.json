{"ast":null,"code":"/**\n * WebSocket service for emergency vehicle communication\n */\n\nclass WebSocketService {\n  constructor() {\n    this.websocket = null;\n    this._isConnected = false;\n    this.deviceId = null;\n    this.vehicleType = null;\n    this.isEmergencyVehicle = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000;\n    this.listeners = new Map();\n  }\n\n  /**\n   * Connect to the WebSocket server\n   */\n  connect() {\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.hostname}:8765`;\n      console.log('Connecting to WebSocket:', wsUrl);\n      this.websocket = new WebSocket(wsUrl);\n      this.websocket.onopen = () => {\n        console.log('WebSocket connected');\n        this._isConnected = true;\n        this.reconnectAttempts = 0;\n        this.emit('connected');\n\n        // Request current system state\n        this.send({\n          type: 'get_system_state'\n        });\n      };\n      this.websocket.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.websocket.onclose = event => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        this._isConnected = false;\n        this.emit('disconnected', {\n          code: event.code,\n          reason: event.reason\n        });\n        if (event.code !== 1000) {\n          // Not a normal closure\n          this.attemptReconnect();\n        }\n      };\n      this.websocket.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Disconnect from the WebSocket server\n   */\n  disconnect() {\n    if (this.websocket) {\n      this.websocket.close(1000, 'Client disconnect');\n      this.websocket = null;\n    }\n    this._isConnected = false;\n  }\n\n  /**\n   * Send a message through the WebSocket\n   */\n  send(data) {\n    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n      this.websocket.send(JSON.stringify(data));\n      return true;\n    }\n    console.warn('Cannot send message: WebSocket not connected');\n    return false;\n  }\n\n  /**\n   * Handle incoming WebSocket messages\n   */\n  handleMessage(data) {\n    switch (data.type) {\n      case 'welcome':\n        this.deviceId = data.device_id;\n        this.vehicleType = data.vehicle_type;\n        this.isEmergencyVehicle = data.vehicle_type === 'emergency_vehicle';\n        this.emit('welcome', data);\n        break;\n      case 'system_state':\n        this.emit('systemState', data);\n        break;\n      case 'position_update':\n        this.emit('positionUpdate', data);\n        break;\n      case 'lane_change':\n        this.emit('laneChange', data);\n        break;\n      case 'emergency_signal':\n        this.emit('emergencySignal', data);\n        break;\n      case 'emergency_cleared':\n        this.emit('emergencyCleared', data);\n        break;\n      case 'pong':\n        this.emit('pong', data);\n        break;\n      default:\n        this.emit('message', data);\n    }\n  }\n\n  /**\n   * Attempt to reconnect to the server\n   */\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      this.emit('maxReconnectAttemptsReached');\n      return;\n    }\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n    setTimeout(() => {\n      this.connect();\n    }, this.reconnectDelay);\n  }\n\n  /**\n   * Send emergency signal\n   */\n  sendEmergencySignal() {\n    if (this.isEmergencyVehicle) {\n      return this.send({\n        type: 'register_emergency',\n        device_id: this.deviceId\n      });\n    }\n    console.warn('Cannot send emergency signal: Not an emergency vehicle');\n    return false;\n  }\n\n  /**\n   * Clear emergency signal\n   */\n  clearEmergencySignal() {\n    if (this.isEmergencyVehicle) {\n      return this.send({\n        type: 'clear_emergency',\n        device_id: this.deviceId\n      });\n    }\n    console.warn('Cannot clear emergency signal: Not an emergency vehicle');\n    return false;\n  }\n\n  /**\n   * Send position update\n   */\n  sendPositionUpdate(position) {\n    return this.send({\n      type: 'position_update',\n      device_id: this.deviceId,\n      position: position\n    });\n  }\n\n  /**\n   * Send lane change request\n   */\n  sendLaneChange(newLane, reason = 'manual') {\n    return this.send({\n      type: 'lane_change',\n      device_id: this.deviceId,\n      new_lane: newLane,\n      reason: reason\n    });\n  }\n\n  /**\n   * Send ping to server\n   */\n  ping() {\n    return this.send({\n      type: 'ping'\n    });\n  }\n\n  /**\n   * Add event listener\n   */\n  addEventListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emit event to listeners\n   */\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in event listener:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get connection status\n   */\n  getConnectionStatus() {\n    return {\n      isConnected: this.websocket && this.websocket.readyState === WebSocket.OPEN,\n      deviceId: this.deviceId,\n      vehicleType: this.vehicleType,\n      isEmergencyVehicle: this.isEmergencyVehicle,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n\n  /**\n   * Check if WebSocket is connected\n   */\n  get isConnected() {\n    return this._isConnected;\n  }\n}\n\n// Create singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;","map":{"version":3,"names":["WebSocketService","constructor","websocket","_isConnected","deviceId","vehicleType","isEmergencyVehicle","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","Map","connect","protocol","window","location","wsUrl","hostname","console","log","WebSocket","onopen","emit","send","type","onmessage","event","data","JSON","parse","handleMessage","error","onclose","code","reason","attemptReconnect","onerror","disconnect","close","readyState","OPEN","stringify","warn","device_id","vehicle_type","setTimeout","sendEmergencySignal","clearEmergencySignal","sendPositionUpdate","position","sendLaneChange","newLane","new_lane","ping","addEventListener","callback","has","set","get","push","removeEventListener","callbacks","index","indexOf","splice","forEach","getConnectionStatus","isConnected","websocketService"],"sources":["/Users/masonforeman/Library/Mobile Documents/com~apple~CloudDocs/University/Year 2/Spring/Mobile Networking/Assignments/Assignment 3/frontend/src/services/websocketService.js"],"sourcesContent":["/**\n * WebSocket service for emergency vehicle communication\n */\n\nclass WebSocketService {\n  constructor() {\n    this.websocket = null;\n    this._isConnected = false;\n    this.deviceId = null;\n    this.vehicleType = null;\n    this.isEmergencyVehicle = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000;\n    this.listeners = new Map();\n  }\n\n  /**\n   * Connect to the WebSocket server\n   */\n  connect() {\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.hostname}:8765`;\n\n      console.log('Connecting to WebSocket:', wsUrl);\n      this.websocket = new WebSocket(wsUrl);\n\n      this.websocket.onopen = () => {\n        console.log('WebSocket connected');\n        this._isConnected = true;\n        this.reconnectAttempts = 0;\n        this.emit('connected');\n\n        // Request current system state\n        this.send({ type: 'get_system_state' });\n      };\n\n      this.websocket.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.handleMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      this.websocket.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        this._isConnected = false;\n        this.emit('disconnected', { code: event.code, reason: event.reason });\n\n        if (event.code !== 1000) { // Not a normal closure\n          this.attemptReconnect();\n        }\n      };\n\n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      this.emit('error', error);\n    }\n  }\n\n  /**\n   * Disconnect from the WebSocket server\n   */\n  disconnect() {\n    if (this.websocket) {\n      this.websocket.close(1000, 'Client disconnect');\n      this.websocket = null;\n    }\n    this._isConnected = false;\n  }\n\n  /**\n   * Send a message through the WebSocket\n   */\n  send(data) {\n    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n      this.websocket.send(JSON.stringify(data));\n      return true;\n    }\n    console.warn('Cannot send message: WebSocket not connected');\n    return false;\n  }\n\n  /**\n   * Handle incoming WebSocket messages\n   */\n  handleMessage(data) {\n    switch (data.type) {\n      case 'welcome':\n        this.deviceId = data.device_id;\n        this.vehicleType = data.vehicle_type;\n        this.isEmergencyVehicle = data.vehicle_type === 'emergency_vehicle';\n        this.emit('welcome', data);\n        break;\n\n      case 'system_state':\n        this.emit('systemState', data);\n        break;\n\n      case 'position_update':\n        this.emit('positionUpdate', data);\n        break;\n\n      case 'lane_change':\n        this.emit('laneChange', data);\n        break;\n\n      case 'emergency_signal':\n        this.emit('emergencySignal', data);\n        break;\n\n      case 'emergency_cleared':\n        this.emit('emergencyCleared', data);\n        break;\n\n      case 'pong':\n        this.emit('pong', data);\n        break;\n\n      default:\n        this.emit('message', data);\n    }\n  }\n\n  /**\n   * Attempt to reconnect to the server\n   */\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      this.emit('maxReconnectAttemptsReached');\n      return;\n    }\n\n    this.reconnectAttempts++;\n    console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n\n    setTimeout(() => {\n      this.connect();\n    }, this.reconnectDelay);\n  }\n\n  /**\n   * Send emergency signal\n   */\n  sendEmergencySignal() {\n    if (this.isEmergencyVehicle) {\n      return this.send({\n        type: 'register_emergency',\n        device_id: this.deviceId\n      });\n    }\n    console.warn('Cannot send emergency signal: Not an emergency vehicle');\n    return false;\n  }\n\n  /**\n   * Clear emergency signal\n   */\n  clearEmergencySignal() {\n    if (this.isEmergencyVehicle) {\n      return this.send({\n        type: 'clear_emergency',\n        device_id: this.deviceId\n      });\n    }\n    console.warn('Cannot clear emergency signal: Not an emergency vehicle');\n    return false;\n  }\n\n  /**\n   * Send position update\n   */\n  sendPositionUpdate(position) {\n    return this.send({\n      type: 'position_update',\n      device_id: this.deviceId,\n      position: position\n    });\n  }\n\n  /**\n   * Send lane change request\n   */\n  sendLaneChange(newLane, reason = 'manual') {\n    return this.send({\n      type: 'lane_change',\n      device_id: this.deviceId,\n      new_lane: newLane,\n      reason: reason\n    });\n  }\n\n  /**\n   * Send ping to server\n   */\n  ping() {\n    return this.send({ type: 'ping' });\n  }\n\n  /**\n   * Add event listener\n   */\n  addEventListener(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  /**\n   * Remove event listener\n   */\n  removeEventListener(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Emit event to listeners\n   */\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in event listener:', error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Get connection status\n   */\n  getConnectionStatus() {\n    return {\n      isConnected: this.websocket && this.websocket.readyState === WebSocket.OPEN,\n      deviceId: this.deviceId,\n      vehicleType: this.vehicleType,\n      isEmergencyVehicle: this.isEmergencyVehicle,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n\n  /**\n   * Check if WebSocket is connected\n   */\n  get isConnected() {\n    return this._isConnected;\n  }\n}\n\n// Create singleton instance\nconst websocketService = new WebSocketService();\n\nexport default websocketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}